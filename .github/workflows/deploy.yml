name: Deploy Moodle (First Time) / Plugin Updates

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    # Add debugging information
    env:
      DEPLOYMENT_BRANCH: ${{ github.ref_name }}
      DEPLOYMENT_COMMIT: ${{ github.sha }}
    
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Debug Workflow Trigger
        run: |
          echo "üöÄ Deployment workflow triggered!"
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          echo "‚úÖ Proceeding with deployment..."

      - name: Check Required Secrets
        id: check-secrets
        run: |
          echo "üîç Checking required secrets..."
          
          # Check first-time deployment secrets
          if [ "${{ secrets.FIRST_TIME_DEPLOYMENT }}" = "true" ]; then
            echo "deployment_type=first_time" >> $GITHUB_OUTPUT
            echo "üöÄ First-time Moodle deployment detected"
            
            if [ -z "${{ secrets.SERVER_BASE_PATH }}" ]; then
              echo "‚ùå SERVER_BASE_PATH secret is missing!"
              echo "Please configure SERVER_BASE_PATH in GitHub Secrets"
              exit 1
            fi
            
            if [ -z "${{ secrets.SERVER_HOST }}" ]; then
              echo "‚ùå SERVER_HOST secret is missing!"
              echo "Please configure SERVER_HOST in GitHub Secrets"
              exit 1
            fi
            
            if [ -z "${{ secrets.SERVER_USERNAME }}" ]; then
              echo "‚ùå SERVER_USERNAME secret is missing!"
              echo "Please configure SERVER_USERNAME in GitHub Secrets"
              exit 1
            fi
            
            if [ -z "${{ secrets.SERVER_SSH_KEY }}" ]; then
              echo "‚ùå SERVER_SSH_KEY secret is missing!"
              echo "Please configure SERVER_SSH_KEY in GitHub Secrets"
              exit 1
            fi
            
            echo "‚úÖ All first-time deployment secrets are configured"
          else
            echo "deployment_type=plugin_update" >> $GITHUB_OUTPUT
            echo "üîß Plugin update deployment detected"
            
            if [ -z "${{ secrets.MOODLE_PATH }}" ]; then
              echo "‚ùå MOODLE_PATH secret is missing!"
              echo "Please configure MOODLE_PATH in GitHub Secrets"
              exit 1
            fi
            
            if [ -z "${{ secrets.SERVER_HOST }}" ]; then
              echo "‚ùå SERVER_HOST secret is missing!"
              echo "Please configure SERVER_HOST in GitHub Secrets"
              exit 1
            fi
            
            if [ -z "${{ secrets.SERVER_USERNAME }}" ]; then
              echo "‚ùå SERVER_USERNAME secret is missing!"
              echo "Please configure SERVER_USERNAME in GitHub Secrets"
              exit 1
            fi
            
            if [ -z "${{ secrets.SERVER_SSH_KEY }}" ]; then
              echo "‚ùå SERVER_SSH_KEY secret is missing!"
              echo "Please configure SERVER_SSH_KEY in GitHub Secrets"
              exit 1
            fi
            
            echo "‚úÖ All plugin update secrets are configured"
          fi

      - name: First-time Moodle Deployment
        if: steps.check-secrets.outputs.deployment_type == 'first_time'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "üöÄ Starting FIRST-TIME Moodle deployment..."
            
            # Check if base path exists, create if not
            if [ ! -d "${{ secrets.SERVER_BASE_PATH }}" ]; then
              echo "üìÅ Creating base directory..."
              mkdir -p ${{ secrets.SERVER_BASE_PATH }}
            fi
            
            # Navigate to server directory
            cd ${{ secrets.SERVER_BASE_PATH }}
            echo "üìç Current directory: $(pwd)"
            
            # Create backup of existing Moodle (if exists)
            if [ -d "moodle" ]; then
              echo "üìã Creating backup of existing Moodle installation..."
              cp -r moodle moodle.backup.$(date +%Y%m%d_%H%M%S)
              echo "‚úÖ Backup created successfully"
            fi
            
            # Remove existing moodle directory if it exists
            if [ -d "moodle" ]; then
              echo "üóëÔ∏è Removing existing moodle directory..."
              rm -rf moodle
            fi
            
            # Clone the complete Moodle repository
            echo "üì• Cloning complete Moodle codebase..."
            git clone -b master https://github.com/${{ github.repository }}.git moodle
            cd moodle
            
            # Check if this is a valid Moodle installation
            if [ ! -f "version.php" ]; then
              echo "‚ùå This doesn't appear to be a valid Moodle installation"
              echo "üìÅ Current directory contents:"
              ls -la
              exit 1
            fi
            
            # Set proper permissions for entire Moodle installation
            echo "üîê Setting proper permissions..."
            find . -type f -exec chmod 644 {} \; 2>/dev/null || echo "‚ö†Ô∏è Some files couldn't be chmod'd"
            find . -type d -exec chmod 755 {} \; 2>/dev/null || echo "‚ö†Ô∏è Some directories couldn't be chmod'd"
            
            # Set specific permissions for critical directories (if they exist)
            for dir in admin config local blocks mod theme; do
              if [ -d "$dir" ]; then
                chmod -R 755 "$dir" 2>/dev/null || echo "‚ö†Ô∏è Couldn't set permissions for $dir"
              fi
            done
            
            # Try to set ownership (may fail if not root)
            chown -R www-data:www-data . 2>/dev/null || echo "‚ö†Ô∏è Couldn't change ownership (not root user)"
            
            # Create moodledata directory if it doesn't exist
            if [ ! -d "../moodledata" ]; then
              echo "üìÅ Creating moodledata directory..."
              mkdir ../moodledata
              chmod 777 ../moodledata
              chown www-data:www-data ../moodledata 2>/dev/null || echo "‚ö†Ô∏è Couldn't change moodledata ownership"
            fi
            
            # Set up Moodle configuration
            echo "‚öôÔ∏è Setting up Moodle configuration..."
            if [ -f "config-dist.php" ]; then
              cp config-dist.php config.php
              echo "‚úÖ config.php created from config-dist.php"
            else
              echo "‚ö†Ô∏è config-dist.php not found, you'll need to create config.php manually"
            fi
            
            # Clear any existing cache (if PHP is available)
            echo "üßπ Clearing cache..."
            if command -v php >/dev/null 2>&1; then
              php admin/cli/purge_caches.php 2>/dev/null || echo "‚ö†Ô∏è Couldn't purge caches (PHP CLI not available or no admin/cli directory)"
            else
              echo "‚ö†Ô∏è PHP not found, skipping cache purge"
            fi
            
            echo "üéâ First-time Moodle deployment completed!"
            echo "üìù Next steps:"
            echo "   1. Configure config.php with database settings"
            echo "   2. Run Moodle installation wizard"
            echo "   3. Set FIRST_TIME_DEPLOYMENT=false for future updates"

      - name: Plugin Update Deployment
        if: steps.check-secrets.outputs.deployment_type == 'plugin_update'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "üîß Starting PLUGIN UPDATE deployment..."
            
            # Navigate to Moodle directory
            cd ${{ secrets.MOODLE_PATH }}
            
            # Create backup of existing plugin (if exists)
            if [ -d "local/test_plugin" ]; then
              echo "üìã Creating backup of existing plugin..."
              cp -r local/test_plugin local/test_plugin.backup.$(date +%Y%m%d_%H%M%S)
              echo "‚úÖ Backup created successfully"
            fi
            
            # Pull latest changes from git
            echo "üì• Pulling latest changes from git..."
            git pull origin master
            
            # Set proper permissions for plugin only
            echo "üîê Setting proper permissions..."
            chmod -R 755 local/test_plugin
            chown -R www-data:www-data local/test_plugin
            
            # Clear Moodle cache
            echo "üßπ Clearing Moodle cache..."
            php admin/cli/purge_caches.php
            
            # Run Moodle upgrade if needed
            echo "‚¨ÜÔ∏è Running Moodle upgrade..."
            php admin/cli/upgrade.php --non-interactive
            
            # Verify plugin installation
            echo "‚úÖ Verifying plugin installation..."
            if [ -f "local/test_plugin/version.php" ]; then
              echo "‚úÖ Plugin files are in place"
            else
              echo "‚ùå Plugin files not found"
              exit 1
            fi
            
            echo "üéâ Plugin update deployed successfully!"

      - name: Verify First-time Deployment
        if: steps.check-secrets.outputs.deployment_type == 'first_time'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "üîç Verifying first-time Moodle deployment..."
            
            # Navigate to the moodle directory
            cd ${{ secrets.SERVER_BASE_PATH }}/moodle
            
            # Check Moodle installation
            if [ -f "version.php" ]; then
              echo "‚úÖ Moodle installation exists"
            else
              echo "‚ùå Moodle installation not found"
              echo "üìÅ Current directory contents:"
              ls -la
              exit 1
            fi
            
            # Check plugin directory (optional for first-time deployment)
            if [ -d "local/test_plugin" ]; then
              echo "‚úÖ Plugin directory exists"
            else
              echo "‚ö†Ô∏è Plugin directory not found (this is normal for first-time deployment)"
            fi
            
            # Check plugin files (optional for first-time deployment)
            if [ -f "local/test_plugin/version.php" ]; then
              echo "‚úÖ Plugin version file exists"
            else
              echo "‚ö†Ô∏è Plugin version file not found (this is normal for first-time deployment)"
            fi
            
            # Check moodledata directory
            if [ -d "../moodledata" ]; then
              echo "‚úÖ moodledata directory exists"
            else
              echo "‚ùå moodledata directory not found"
              exit 1
            fi
            
            echo "üéâ First-time deployment verification completed successfully!"

      - name: Verify Plugin Update
        if: steps.check-secrets.outputs.deployment_type == 'plugin_update'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "üîç Verifying plugin update deployment..."
            
            cd ${{ secrets.MOODLE_PATH }}
            
            # Check plugin directory
            if [ -d "local/test_plugin" ]; then
              echo "‚úÖ Plugin directory exists"
            else
              echo "‚ùå Plugin directory not found"
              exit 1
            fi
            
            # Check plugin files
            if [ -f "local/test_plugin/version.php" ]; then
              echo "‚úÖ Plugin version file exists"
            else
              echo "‚ùå Plugin version file not found"
              exit 1
            fi
            
            # Check permissions
            if [ -r "local/test_plugin/version.php" ]; then
              echo "‚úÖ Plugin files are readable"
            else
              echo "‚ùå Plugin files are not readable"
              exit 1
            fi
            
            echo "üéâ Plugin update verification completed successfully!"

      - name: Notify First-time Deployment Success
        if: success() && steps.check-secrets.outputs.deployment_type == 'first_time'
        run: |
          echo "‚úÖ FIRST-TIME Moodle deployment completed successfully!"
          echo "üåê Server: ${{ secrets.SERVER_HOST }}"
          echo "üìÅ Moodle Path: ${{ secrets.SERVER_BASE_PATH }}/moodle"
          echo "üìÖ Deployment completed at $(date)"
          echo "üìù Next steps:"
          echo "   1. Configure config.php with database settings"
          echo "   2. Run Moodle installation wizard"
          echo "   3. Set FIRST_TIME_DEPLOYMENT=false for future updates"

      - name: Notify Plugin Update Success
        if: success() && steps.check-secrets.outputs.deployment_type == 'plugin_update'
        run: |
          echo "‚úÖ Plugin update deployed successfully!"
          echo "üåê Server: ${{ secrets.SERVER_HOST }}"
          echo "üîó Moodle URL: ${{ secrets.MOODLE_URL }}"
          echo "üìÖ Deployment completed at $(date)"
          echo "üéØ Plugin: local/test_plugin"

      - name: Notify Deployment Failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "üîç Check the logs for more details."
          echo "üìÖ Failure occurred at $(date)"
          echo "üîÑ You may need to manually deploy or check server configuration." 