name: Deploy Plugin Updates

on:
  # Deploy on push to master
  push:
    branches: [master]
  
  # Allow manual deployment
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    # Add debugging information
    env:
      DEPLOYMENT_BRANCH: ${{ github.ref_name }}
      DEPLOYMENT_COMMIT: ${{ github.sha }}
    
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Debug Workflow Trigger
        run: |
          echo "🚀 Deployment workflow triggered!"
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "📤 Push to master triggered deployment"
            echo "✅ Proceeding with deployment..."
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "🔧 Manual deployment triggered"
            echo "✅ Proceeding with deployment..."
          fi

      - name: Check Required Secrets
        id: check-secrets
        run: |
          echo "🔍 Checking required secrets..."
          
          if [ -z "${{ secrets.SERVER_BASE_PATH }}" ]; then
            echo "❌ SERVER_BASE_PATH secret is missing!"
            echo "Please configure SERVER_BASE_PATH in GitHub Secrets"
            exit 1
          fi
          
          if [ -z "${{ secrets.SERVER_HOST }}" ]; then
            echo "❌ SERVER_HOST secret is missing!"
            echo "Please configure SERVER_HOST in GitHub Secrets"
            exit 1
          fi
          
          if [ -z "${{ secrets.SERVER_USERNAME }}" ]; then
            echo "❌ SERVER_USERNAME secret is missing!"
            echo "Please configure SERVER_USERNAME in GitHub Secrets"
            exit 1
          fi
          
          if [ -z "${{ secrets.SERVER_SSH_KEY }}" ]; then
            echo "❌ SERVER_SSH_KEY secret is missing!"
            echo "Please configure SERVER_SSH_KEY in GitHub Secrets"
            exit 1
          fi
          
          echo "✅ All plugin update secrets are configured"

      - name: Deploy All Plugins
        id: plugin-detection
        run: |
          echo "🚀 Deploying ALL plugins without git detection..."
          
          # Deploy all plugins found in the repository
          PLUGINS_TO_DEPLOY=""
          
          # Add all local plugins
          if [ -d "local" ]; then
            echo "📁 Scanning local plugins..."
            for dir in local/*/; do
              if [ -f "${dir}version.php" ] || [ -f "${dir}lib.php" ] || [ -f "${dir}index.php" ]; then
                PLUGIN_DIR="${dir%/}"
                echo "✅ Found local plugin: $PLUGIN_DIR"
                PLUGINS_TO_DEPLOY="$PLUGINS_TO_DEPLOY $PLUGIN_DIR"
              else
                echo "⚠️ Skipping invalid local plugin: ${dir%/} (missing required files)"
              fi
            done
          fi
          
          # Add all custom mod plugins
          if [ -d "mod" ]; then
            echo "📁 Scanning mod plugins..."
            for dir in mod/*/; do
              dirname=$(basename "$dir")
              # Skip built-in Moodle modules, focus on custom ones
              if [[ ! "$dirname" =~ ^(assign|book|chat|choice|data|feedback|forum|glossary|h5pactivity|imscp|label|lesson|lti|page|quiz|resource|scorm|survey|url|wiki|workshop)$ ]]; then
                if [ -f "${dir}version.php" ] || [ -f "${dir}lib.php" ] || [ -f "${dir}mod_form.php" ]; then
                  PLUGIN_DIR="${dir%/}"
                  echo "✅ Found mod plugin: $PLUGIN_DIR"
                  PLUGINS_TO_DEPLOY="$PLUGINS_TO_DEPLOY $PLUGIN_DIR"
                else
                  echo "⚠️ Skipping invalid mod plugin: ${dir%/} (missing required files)"
                fi
              fi
            done
          fi
          
          # Add all custom block plugins
          if [ -d "blocks" ]; then
            echo "📁 Scanning block plugins..."
            for dir in blocks/*/; do
              dirname=$(basename "$dir")
              # Skip built-in Moodle blocks, focus on custom ones
              if [[ ! "$dirname" =~ ^(accessreview|activity_modules|activity_results|admin_bookmarks|badges|blog_menu|blog_recent|blog_tags|calendar_month|calendar_upcoming|comments|completionstatus|course_list|course_summary|feedback|globalsearch|glossary_random|html|login|lp|mentees|mnet_hosts|myoverview|myprofile|navigation|news_items|online_users|private_files|recent_activity|recentlyaccessedcourses|recentlyaccesseditems|rss_client|search_forums|section_links|selfcompletion|settings|site_main_menu|social_activities|starredcourses|tag_flickr|tag_youtube|tags|timeline)$ ]]; then
                if [ -f "${dir}version.php" ] || [ -f "${dir}block_${dirname}.php" ] || [ -f "${dir}lib.php" ]; then
                  PLUGIN_DIR="${dir%/}"
                  echo "✅ Found block plugin: $PLUGIN_DIR"
                  PLUGINS_TO_DEPLOY="$PLUGINS_TO_DEPLOY $PLUGIN_DIR"
                else
                  echo "⚠️ Skipping invalid block plugin: ${dir%/} (missing required files)"
                fi
              fi
            done
          fi
          
          # Store plugins for deployment
          if [ -n "$PLUGINS_TO_DEPLOY" ]; then
            echo "📋 All plugins to deploy: $PLUGINS_TO_DEPLOY"
            echo "PLUGINS_TO_DEPLOY=$PLUGINS_TO_DEPLOY" >> $GITHUB_ENV
            echo "plugins_to_deploy=$PLUGINS_TO_DEPLOY" >> $GITHUB_OUTPUT
          else
            echo "⚠️ No plugins found in repository"
            echo "PLUGINS_TO_DEPLOY=" >> $GITHUB_ENV
            echo "plugins_to_deploy=" >> $GITHUB_OUTPUT
          fi

      - name: Copy Plugins to Server (if needed)
        if: env.PLUGINS_TO_DEPLOY != ''
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: "local/,mod/,blocks/"
          target: "/tmp/moodle_plugins_backup/"
          strip_components: 0
          overwrite: true

      - name: Plugin Update Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          timeout: 300s
          command_timeout: 300s
          script: |
            # Get the list of plugins to deploy
            PLUGINS_TO_DEPLOY="${{ env.PLUGINS_TO_DEPLOY }}"
            
            echo "🔧 Starting MULTI-PLUGIN UPDATE deployment..."
            echo "📋 Plugins to deploy: $PLUGINS_TO_DEPLOY"
            
            # Navigate to Moodle directory
            echo "🔍 Attempting to navigate to: ${{ secrets.SERVER_BASE_PATH }}"
            cd ${{ secrets.SERVER_BASE_PATH }}
            echo "📍 Base directory: $(pwd)"
            
            # Check if moodle subdirectory exists
            if [ ! -d "moodle" ]; then
              echo "❌ Moodle directory not found in base path"
              echo "📁 Current directory contents:"
              ls -la
              echo "❌ Deployment failed: Moodle directory not found"
              exit 1
            fi
            
            # Navigate to the moodle subdirectory
            cd moodle
            echo "📍 Moodle directory: $(pwd)"
            
            # Ensure required directories exist
            echo "🔧 Ensuring required directories exist..."
            mkdir -p local mod blocks 2>/dev/null || echo "⚠️ Could not create some directories"
            echo "✅ Directory structure verified"
            
            # Check if this is a git repository
            if [ ! -d ".git" ]; then
              echo "❌ Not a git repository. Cannot pull latest changes."
              echo "📁 Current directory contents:"
              ls -la
              echo "⚠️ Continuing without git operations..."
              GIT_AVAILABLE=false
            else
              GIT_AVAILABLE=true
            fi
            
            # Only perform git operations if git is available
            if [ "$GIT_AVAILABLE" = "true" ]; then
              # Fix git permissions and ownership issues FIRST
              echo "🔧 Fixing git repository permissions and ownership..."
              sudo chown -R www-data:www-data .git/ 2>/dev/null || echo "⚠️ Could not change git ownership"
              sudo chmod -R 755 .git/ 2>/dev/null || echo "⚠️ Could not change git permissions"
              
              # Add safe directory to git config to fix dubious ownership
              echo "🔧 Adding safe directory to git config..."
              git config --global --add safe.directory $(pwd) 2>/dev/null || echo "⚠️ Could not add safe directory"
              git config --global --add safe.directory ${{ secrets.SERVER_BASE_PATH }}/moodle 2>/dev/null || echo "⚠️ Could not add safe directory with full path"
              
              # Configure git to use merge strategy for divergent branches
              git config pull.rebase false
              
              # Pull latest changes from git
              echo "📥 Pulling latest changes from git..."
              echo "🔍 Current branch: $(git branch --show-current)"
              echo "🔍 Available branches:"
              git branch -a
              
              # Fetch all branches first
              echo "📥 Fetching all branches..."
              if ! git fetch --all; then
                echo "❌ Failed to fetch branches, trying alternative approach..."
                # Try fetching just the master branch
                if ! git fetch origin master; then
                  echo "❌ Failed to fetch master branch, trying with different user..."
                  # Try with different ownership
                  sudo -u www-data git fetch origin master 2>/dev/null || {
                    echo "❌ Failed to fetch with www-data user, trying as current user..."
                    git fetch origin master 2>/dev/null || {
                      echo "❌ All fetch attempts failed, continuing without git..."
                      GIT_AVAILABLE=false
                    }
                  }
                fi
              fi
              
              # Only continue with git operations if fetch was successful
              if [ "$GIT_AVAILABLE" = "true" ]; then
                # Pull from the correct branch (master or the deployment branch)
                DEPLOYMENT_BRANCH="${{ github.ref_name }}"
                echo "🔍 Deployment branch: $DEPLOYMENT_BRANCH"
                
                if [ "$DEPLOYMENT_BRANCH" = "refs/heads/master" ] || [ "$DEPLOYMENT_BRANCH" = "master" ]; then
                  echo "📥 Pulling from master branch..."
                  if ! git pull origin master; then
                    echo "❌ Failed to pull from master branch, trying reset approach..."
                    # Try hard reset to origin/master
                    if ! git reset --hard origin/master; then
                      echo "❌ Failed to reset to master branch, continuing without git..."
                      GIT_AVAILABLE=false
                    fi
                  fi
                else
                  echo "📥 Pulling from hotfix/new_updates branch..."
                  if ! git pull origin hotfix/new_updates; then
                    echo "❌ Failed to pull from hotfix/new_updates branch, trying reset approach..."
                    # Try hard reset to origin/hotfix/new_updates
                    if ! git reset --hard origin/hotfix/new_updates; then
                      echo "❌ Failed to reset to hotfix/new_updates branch, continuing without git..."
                      GIT_AVAILABLE=false
                    fi
                  fi
                fi
                
                # Show git status after pull
                if [ "$GIT_AVAILABLE" = "true" ]; then
                  echo "🔍 Git status after pull:"
                  git status
                  echo "🔍 Current branch after pull: $(git branch --show-current)"
                  
                  # If there are conflicts or issues, try a hard reset to the remote branch
                  if [ "$(git status --porcelain)" != "" ]; then
                    echo "⚠️ Git repository has uncommitted changes, performing hard reset..."
                    if [ "$DEPLOYMENT_BRANCH" = "refs/heads/master" ] || [ "$DEPLOYMENT_BRANCH" = "master" ]; then
                      git reset --hard origin/master
                    else
                      git reset --hard origin/hotfix/new_updates
                    fi
                    echo "✅ Hard reset completed"
                  fi
                fi
              fi
            else
              echo "⚠️ Git operations skipped - using existing files"
            fi
            
            # Show what plugins are available after git pull
            echo "📁 Available plugins after git pull:"
            ls -la local/ 2>/dev/null || echo "No local plugins found"
            
            # Verify swap_list plugin specifically
            echo "🔍 Checking for swap_list plugin specifically:"
            if [ -d "local/swap_list" ]; then
              echo "✅ swap_list plugin found!"
              ls -la local/swap_list/
            else
              echo "❌ swap_list plugin not found!"
              echo "📁 Available local plugins:"
              ls -la local/ 2>/dev/null || echo "No local plugins found"
            fi
            
            # If git operations failed, we need to copy plugins from the workspace
            if [ "$GIT_AVAILABLE" = "false" ]; then
              echo "⚠️ Git operations failed - attempting to use copied plugins..."
              if [ -d "/tmp/moodle_plugins_backup" ]; then
                echo "📁 Found copied plugins in /tmp/moodle_plugins_backup/"
                echo "📋 Copying plugins to Moodle directory..."
                
                # Copy local plugins
                if [ -d "/tmp/moodle_plugins_backup/local" ]; then
                  cp -r /tmp/moodle_plugins_backup/local/* local/ 2>/dev/null || echo "⚠️ Could not copy local plugins"
                fi
                
                # Copy mod plugins
                if [ -d "/tmp/moodle_plugins_backup/mod" ]; then
                  cp -r /tmp/moodle_plugins_backup/mod/* mod/ 2>/dev/null || echo "⚠️ Could not copy mod plugins"
                fi
                
                # Copy block plugins
                if [ -d "/tmp/moodle_plugins_backup/blocks" ]; then
                  cp -r /tmp/moodle_plugins_backup/blocks/* blocks/ 2>/dev/null || echo "⚠️ Could not copy block plugins"
                fi
                
                echo "✅ Plugin copying completed"
              else
                echo "⚠️ No copied plugins found - using existing files"
              fi
            fi
            
            # Clean up any invalid plugin directories first
            echo "🧹 Cleaning up invalid plugin directories..."
            for plugin_dir in local/* mod/* blocks/*; do
              if [ -d "$plugin_dir" ] && [ ! -f "$plugin_dir/version.php" ] && [ ! -f "$plugin_dir/lib.php" ] && [ ! -f "$plugin_dir/index.php" ]; then
                # Check if directory is completely empty
                if [ -z "$(ls -A "$plugin_dir" 2>/dev/null)" ]; then
                  echo "🗑️ Removing empty plugin directory: $plugin_dir"
                  rm -rf "$plugin_dir" 2>/dev/null || echo "⚠️ Could not remove $plugin_dir"
                fi
              fi
            done
            
            # Deploy each plugin
            if [ -z "$PLUGINS_TO_DEPLOY" ]; then
              echo "⚠️ No plugins to deploy, checking if plugins exist..."
              echo "📁 Available directories:"
              ls -la
              echo "📁 Local directory contents:"
              ls -la local/ 2>/dev/null || echo "No local directory found"
              echo "⚠️ Skipping plugin deployment"
            else
              for plugin_path in $PLUGINS_TO_DEPLOY; do
              echo "🎯 Deploying plugin: $plugin_path"
              
              # Check if plugin exists after git pull
              if [ ! -d "$plugin_path" ]; then
                echo "❌ Plugin directory $plugin_path not found after git pull!"
                echo "📁 Available local plugins:"
                ls -la local/ 2>/dev/null || echo "No local plugins found"
                echo "⚠️ Continuing with other plugins..."
                continue
              fi
              
              # Create backup of existing plugin (if exists)
              echo "📋 Creating backup of existing plugin..."
              cp -r $plugin_path ${plugin_path}.backup.$(date +%Y%m%d_%H%M%S)
              echo "✅ Backup created successfully for $plugin_path"
              
              # Set proper permissions for plugin
              echo "🔐 Setting proper permissions for $plugin_path..."
              chmod -R 755 $plugin_path
              chown -R www-data:www-data $plugin_path
              echo "✅ Permissions set for $plugin_path"
              
              # Verify plugin installation
              echo "✅ Verifying plugin installation for $plugin_path..."
              if [ -f "$plugin_path/version.php" ]; then
                echo "✅ Plugin files are in place for $plugin_path"
                echo "📊 Plugin version info for $plugin_path:"
                grep -E "\$plugin->version|\$plugin->component" $plugin_path/version.php 2>/dev/null || echo "Could not read plugin version"
              else
                echo "❌ Plugin version.php not found at $plugin_path"
                echo "📁 Available files in plugin directory:"
                ls -la $plugin_path 2>/dev/null || echo "Plugin directory not accessible"
                
                # Check if this might be a different type of plugin structure
                if [ -f "$plugin_path/lib.php" ] || [ -f "$plugin_path/index.php" ] || [ -f "$plugin_path/mod_form.php" ]; then
                  echo "⚠️ Plugin has files but missing version.php - might be incomplete"
                  echo "📋 Creating a basic version.php file for $plugin_path..."
                  
                  # Extract plugin name from path
                  plugin_name=$(basename "$plugin_path")
                  plugin_type=$(dirname "$plugin_path" | sed 's|.*/||')
                  
                  # Create a basic version.php if it doesn't exist
                  echo "<?php" > "$plugin_path/version.php"
                  echo "// This file is part of Moodle - http://moodle.org/" >> "$plugin_path/version.php"
                  echo "//" >> "$plugin_path/version.php"
                  echo "// Moodle is free software: you can redistribute it and/or modify" >> "$plugin_path/version.php"
                  echo "// it under the terms of the GNU General Public License as published by" >> "$plugin_path/version.php"
                  echo "// the Free Software Foundation, either version 3 of the License, or" >> "$plugin_path/version.php"
                  echo "// (at your option) any later version." >> "$plugin_path/version.php"
                  echo "" >> "$plugin_path/version.php"
                  echo "defined('MOODLE_INTERNAL') || die();" >> "$plugin_path/version.php"
                  echo "" >> "$plugin_path/version.php"
                  echo "\$plugin->version   = 2024080100;" >> "$plugin_path/version.php"
                  echo "\$plugin->requires  = 2022041900; // Moodle 4.0" >> "$plugin_path/version.php"
                  echo "\$plugin->component = '${plugin_type}_${plugin_name}';" >> "$plugin_path/version.php"
                  echo "\$plugin->maturity  = MATURITY_STABLE;" >> "$plugin_path/version.php"
                  echo "\$plugin->release   = '1.0';" >> "$plugin_path/version.php"
                  echo "✅ Created basic version.php for $plugin_path"
                else
                  echo "⚠️ Plugin appears to be empty or invalid, continuing with other plugins..."
                  continue
                fi
              fi
              
              echo "✅ Successfully deployed plugin: $plugin_path"
            done
            fi
            
            # Clear Moodle cache after all plugins are deployed
            echo "🧹 Clearing Moodle cache..."
            if [ -f "admin/cli/purge_caches.php" ]; then
              if php admin/cli/purge_caches.php; then
                echo "✅ Cache cleared successfully"
              else
                echo "⚠️ Cache clearing failed, but continuing..."
              fi
            else
              echo "⚠️ Cache clearing script not found, but continuing..."
            fi
            
            # Disable automatic Moodle core jobs (user preference)
            echo "🔧 Disabling automatic Moodle core jobs..."
            if [ -f "admin/cli/cron.php" ]; then
              # Check if cron is currently enabled
              if php admin/cli/cron.php --help >/dev/null 2>&1; then
                echo "⚠️ Moodle cron is available but will not be automatically run"
                echo "📋 Manual cron execution may be required: php admin/cli/cron.php"
              fi
            fi
            
            # Check current plugin versions before upgrade
            echo "📊 Pre-upgrade version check..."
            echo "🧩 Current plugin versions:"
            find local/ -name "version.php" -exec echo "File: {}" \; -exec grep -E "\$plugin->version|\$plugin->component" {} \; 2>/dev/null || echo "No plugin version files found"
            
            # Run Moodle upgrade if needed
            echo "⬆️ Running Moodle upgrade..."
            if [ -f "admin/cli/upgrade.php" ]; then
              # Check and fix PHP max_input_vars setting if needed
              echo "🔍 Checking PHP settings..."
              CURRENT_MAX_INPUT_VARS=$(php -r "echo ini_get('max_input_vars');" 2>/dev/null || echo "0")
              echo "📊 Current max_input_vars: $CURRENT_MAX_INPUT_VARS"
              
              if [ "$CURRENT_MAX_INPUT_VARS" -lt 5000 ]; then
                echo "⚠️ max_input_vars is too low ($CURRENT_MAX_INPUT_VARS), attempting to set it for this session..."
                export PHP_INI_SCAN_DIR="/tmp"
                echo "max_input_vars = 10000" > /tmp/99-moodle.ini
              fi
              
              if php admin/cli/upgrade.php --non-interactive; then
                echo "✅ Moodle upgrade completed successfully"
                
                # Verify upgrade success
                echo "🔍 Post-upgrade verification..."
                if php admin/cli/cfg.php --component=core --name=version 2>/dev/null; then
                  echo "✅ Moodle core version updated successfully"
                else
                  echo "⚠️ Could not verify core version update"
                fi
                
              else
                echo "❌ Moodle upgrade failed!"
                echo "📋 Checking for upgrade issues..."
                
                # Check if it's a version conflict
                if [ -f "version.php" ]; then
                  echo "📊 Moodle version information:"
                  grep -E "\$release|\$version" version.php || echo "Could not read version info"
                fi
                
                # Check plugin versions
                echo "🧩 Plugin version information:"
                find local/ -name "version.php" -exec echo "File: {}" \; -exec grep -E "\$plugin->version|\$plugin->component" {} \; 2>/dev/null || echo "No plugin version files found"
                
                # Check for common upgrade issues
                echo "🔍 Common upgrade issue checks:"
                echo "- Database connection:"
                php -r "echo 'PHP version: ' . PHP_VERSION . PHP_EOL;" 2>/dev/null || echo "  PHP check failed"
                
                echo "⚠️ Moodle upgrade failed, but continuing with deployment..."
                echo "📋 This might be due to PHP settings or database issues"
                echo "🔧 You may need to manually run the upgrade later"
              fi
            else
              echo "⚠️ Upgrade script not found, skipping upgrade..."
            fi
            
            # Clean up temporary plugin backup
            echo "🧹 Cleaning up temporary files..."
            rm -rf /tmp/moodle_plugins_backup 2>/dev/null || echo "⚠️ Could not clean up temporary files"
            
            echo "🎉 Multi-plugin deployment completed successfully!"

      - name: Verify Plugin Updates
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          timeout: 300s
          command_timeout: 300s
          script: |
            echo "🔍 Verifying multi-plugin deployment..."
            
            cd ${{ secrets.SERVER_BASE_PATH }}/moodle
            
            # Get the list of plugins that were deployed
            PLUGINS_TO_VERIFY="${{ steps.plugin-detection.outputs.plugins_to_deploy }}"
            
            echo "📋 Verifying plugins: $PLUGINS_TO_VERIFY"
            
            # Verify each plugin
            if [ -z "$PLUGINS_TO_VERIFY" ]; then
              echo "⚠️ No plugins to verify"
              echo "📁 Checking what plugins exist on server:"
              ls -la local/ 2>/dev/null || echo "No local plugins found on server"
            else
              for plugin_path in $PLUGINS_TO_VERIFY; do
              echo "🔍 Verifying plugin: $plugin_path"
              
              # Check plugin directory
              if [ -d "$plugin_path" ]; then
                echo "✅ Plugin directory exists: $plugin_path"
              else
                echo "❌ Plugin directory not found: $plugin_path"
                exit 1
              fi
              
              # Check plugin files
              if [ -f "$plugin_path/version.php" ]; then
                echo "✅ Plugin version file exists: $plugin_path"
              else
                echo "❌ Plugin version file not found: $plugin_path"
                echo "📁 Contents of $plugin_path directory:"
                ls -la "$plugin_path" 2>/dev/null || echo "Could not list directory contents"
                echo "⚠️ Skipping this plugin verification and continuing..."
                continue
              fi
              
              # Check permissions
              if [ -r "$plugin_path/version.php" ]; then
                echo "✅ Plugin files are readable: $plugin_path"
              else
                echo "❌ Plugin files are not readable: $plugin_path"
                exit 1
              fi
            done
            fi
            
            echo "🎉 Multi-plugin verification completed successfully!"

      - name: Notify Plugin Update Success
        if: success()
        run: |
          echo "✅ Multi-plugin update deployed successfully!"
          echo "🌐 Server: ${{ secrets.SERVER_HOST }}"
          echo "🔗 Moodle URL: ${{ secrets.MOODLE_URL }}"
          echo "📅 Deployment completed at $(date)"
          echo "🎯 Plugins deployed: ${{ steps.plugin-detection.outputs.plugins_to_deploy }}"

      - name: Notify Deployment Failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "🔍 Check the logs for more details."
          echo "📅 Failure occurred at $(date)"
          echo "🔄 You may need to manually deploy or check server configuration." 