name: Deploy Plugin Updates

on:
  # Deploy on push to master
  push:
    branches: [master]
  
  # Allow manual deployment
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    # Add debugging information
    env:
      DEPLOYMENT_BRANCH: ${{ github.ref_name }}
      DEPLOYMENT_COMMIT: ${{ github.sha }}
    
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Fetch at least 2 commits for comparison

      - name: Debug Workflow Trigger
        run: |
          echo "🚀 Deployment workflow triggered!"
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          echo "Before: ${{ github.event.before }}"
          echo "After: ${{ github.event.after }}"
          
          echo "🔍 Git repository status:"
          git log --oneline -3 2>/dev/null || echo "Limited git history"
          git branch -a 2>/dev/null || echo "No branches info"
          
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "📤 Push to master triggered deployment"
            echo "✅ Proceeding with deployment..."
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "🔧 Manual deployment triggered"
            echo "✅ Proceeding with deployment..."
          fi

      - name: Check Required Secrets
        id: check-secrets
        run: |
          echo "🔍 Checking required secrets..."
          
          if [ -z "${{ secrets.SERVER_BASE_PATH }}" ]; then
            echo "❌ SERVER_BASE_PATH secret is missing!"
            echo "Please configure SERVER_BASE_PATH in GitHub Secrets"
            exit 1
          fi
          
          if [ -z "${{ secrets.SERVER_HOST }}" ]; then
            echo "❌ SERVER_HOST secret is missing!"
            echo "Please configure SERVER_HOST in GitHub Secrets"
            exit 1
          fi
          
          if [ -z "${{ secrets.SERVER_USERNAME }}" ]; then
            echo "❌ SERVER_USERNAME secret is missing!"
            echo "Please configure SERVER_USERNAME in GitHub Secrets"
            exit 1
          fi
          
          if [ -z "${{ secrets.SERVER_SSH_KEY }}" ]; then
            echo "❌ SERVER_SSH_KEY secret is missing!"
            echo "Please configure SERVER_SSH_KEY in GitHub Secrets"
            exit 1
          fi
          
          echo "✅ All plugin update secrets are configured"

      - name: Detect Changed Plugins for Deployment
        id: plugin-detection
        run: |
          echo "🚀 Detecting plugins that need deployment..."
          echo "🔍 This deployment will only deploy plugins that have been changed"
          
          # Use the same logic as the CI workflow to detect changed plugins
          PLUGINS_TO_DEPLOY=""
          
          # Get changed files (similar to CI workflow)
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "📋 Checking changes in the push to master..."
            echo "🔍 Current HEAD: $(git rev-parse HEAD)"
            echo "🔍 Available commits: $(git log --oneline -5 2>/dev/null || echo 'Limited history')"
            
            # Try different methods to get changed files
            if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
              echo "✅ Using HEAD~1 comparison"
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
              echo "📊 Git diff command: git diff --name-only HEAD~1 HEAD"
            elif [ -n "${{ github.event.before }}" ] && [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
              echo "✅ Using GitHub event before/after comparison"
              CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
              echo "📊 Git diff command: git diff --name-only ${{ github.event.before }} ${{ github.event.after }}"
            else
              echo "⚠️ Cannot determine previous commit, using recent changes"
              # Fallback: get files modified in the last commit
              CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD 2>/dev/null || echo "")
              if [ -z "$CHANGED_FILES" ]; then
                echo "⚠️ No git history available - this might be the first commit or a shallow clone"
                echo "🔧 As a safety measure, we'll check for all plugin files that exist"
                # List all plugin files as "changed" for safety
                CHANGED_FILES=""
                if [ -d "local" ]; then
                  CHANGED_FILES="$CHANGED_FILES $(find local -name "*.php" 2>/dev/null | head -20)"
                fi
                if [ -d "mod" ]; then
                  CHANGED_FILES="$CHANGED_FILES $(find mod -name "*.php" 2>/dev/null | head -10)"
                fi
                if [ -d "blocks" ]; then
                  CHANGED_FILES="$CHANGED_FILES $(find blocks -name "*.php" 2>/dev/null | head -10)"
                fi
                # Convert to newline-separated format
                CHANGED_FILES=$(echo "$CHANGED_FILES" | tr ' ' '\n' | grep -v '^$')
              fi
              echo "📊 Git diff command (fallback): git diff-tree --no-commit-id --name-only -r HEAD"
            fi
          else
            echo "📋 Manual deployment triggered - deploying all plugins"
            # For manual deployment, deploy all valid plugins
            CHANGED_FILES=$(find local mod blocks -name "*.php" -o -name "*.js" -o -name "*.css" -o -name "*.mustache" 2>/dev/null | head -50)
          fi
          
          echo "📄 Changed files:"
          echo "$CHANGED_FILES"
          
          # Count the number of changed files
          CHANGED_COUNT=$(echo "$CHANGED_FILES" | wc -l)
          echo "📊 Total changed files: $CHANGED_COUNT"
          
          # Extract plugin folders from changed files (same logic as CI)
          echo "🔍 Analyzing changed files for plugin directories..."
          
          # Get potential plugin paths from changed files
          POTENTIAL_PLUGINS=$(echo "$CHANGED_FILES" | grep -E '^(mod|local|blocks)/[^/]+/' | cut -d/ -f1,2 | sort -u)
          
          if [ -z "$POTENTIAL_PLUGINS" ]; then
            echo "📋 No potential plugin directories found in changed files"
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "🔧 Manual deployment: scanning for all valid plugins..."
              # For manual deployment, include all valid plugins
              for dir in local/*/; do
                if [ -d "$dir" ] && [ -f "${dir}version.php" ]; then
                  PLUGIN_DIR="${dir%/}"
                  if grep -q '\$plugin->component' "$PLUGIN_DIR/version.php" 2>/dev/null; then
                    echo "✅ Found local plugin: $PLUGIN_DIR"
                    PLUGINS_TO_DEPLOY="$PLUGINS_TO_DEPLOY $PLUGIN_DIR"
                  fi
                fi
              done
            fi
          else
            echo "📋 Potential plugin directories from changed files:"
            echo "$POTENTIAL_PLUGINS"
            
            for plugin_path in $POTENTIAL_PLUGINS; do
              echo "🔍 Checking plugin directory: $plugin_path"
              
              # Check if directory exists
              if [ ! -d "$plugin_path" ]; then
                echo "⚠️ Directory does not exist: $plugin_path"
                continue
              fi
              
              # Check if version.php exists
              if [ ! -f "$plugin_path/version.php" ]; then
                echo "⚠️ No version.php found in: $plugin_path"
                continue
              fi
              
              # Additional validation: check if version.php contains plugin component
              if ! grep -q '\$plugin->component' "$plugin_path/version.php" 2>/dev/null; then
                echo "⚠️ version.php missing \$plugin->component in: $plugin_path"
                continue
              fi
              
              echo "✅ Valid plugin detected for deployment: $plugin_path"
              PLUGINS_TO_DEPLOY="$PLUGINS_TO_DEPLOY $plugin_path"
            done
          fi
          
          # Remove leading space
          PLUGINS_TO_DEPLOY=$(echo "$PLUGINS_TO_DEPLOY" | sed 's/^ *//')
          
          # Store plugins for deployment
          if [ -n "$PLUGINS_TO_DEPLOY" ]; then
            echo "📋 Plugins to deploy: $PLUGINS_TO_DEPLOY"
            echo "PLUGINS_TO_DEPLOY=$PLUGINS_TO_DEPLOY" >> $GITHUB_ENV
            echo "plugins_to_deploy=$PLUGINS_TO_DEPLOY" >> $GITHUB_OUTPUT
          else
            echo "⚠️ No plugins need deployment"
            echo "🔍 This could mean:"
            echo "   - No plugin files were modified in this push"
            echo "   - Changes are in non-plugin directories"
            echo "   - All changes are in invalid plugin directories"
            echo "PLUGINS_TO_DEPLOY=" >> $GITHUB_ENV
            echo "plugins_to_deploy=" >> $GITHUB_OUTPUT
          fi

      - name: No Plugin Deployment Needed
        if: steps.plugin-detection.outputs.plugins_to_deploy == ''
        run: |
          echo "ℹ️ No plugin deployment needed"
          echo "🔍 Analysis completed - no plugin changes detected in this push"
          echo "✅ This is normal when only non-plugin files were modified"
          echo "📋 Examples of non-plugin changes:"
          echo "   - Documentation updates (README, guides, etc.)"
          echo "   - Configuration file changes"
          echo "   - Root-level file modifications"
          echo "   - Changes to core Moodle files (not recommended)"
          echo ""
          echo "🎯 If you expected plugin deployment, check that:"
          echo "   - Plugin files were actually modified"
          echo "   - Plugin directories have valid version.php files"
          echo "   - Plugin version.php contains \$plugin->component"

      - name: Plugin Update Deployment
        if: steps.plugin-detection.outputs.plugins_to_deploy != ''
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Get the list of plugins to deploy
            PLUGINS_TO_DEPLOY="${{ steps.plugin-detection.outputs.plugins_to_deploy }}"
            
            echo "🔧 Starting MULTI-PLUGIN UPDATE deployment..."
            echo "📋 Plugins to deploy: $PLUGINS_TO_DEPLOY"
            
            # Navigate to Moodle directory
            cd ${{ secrets.SERVER_BASE_PATH }}
            echo "📍 Base directory: $(pwd)"
            
            # Check if moodle subdirectory exists
            if [ ! -d "moodle" ]; then
              echo "❌ Moodle directory not found in base path"
              echo "📁 Current directory contents:"
              ls -la
              exit 1
            fi
            
            # Navigate to the moodle subdirectory
            cd moodle
            echo "📍 Moodle directory: $(pwd)"
            
            # Check if this is a git repository
            if [ ! -d ".git" ]; then
              echo "❌ Not a git repository. Cannot pull latest changes."
              echo "📁 Current directory contents:"
              ls -la
              exit 1
            fi
            
            # Pull latest changes from git
            echo "📥 Pulling latest changes from git..."
            echo "🔍 Current branch: $(git branch --show-current)"
            echo "🔍 Available branches:"
            git branch -a
            
            # Configure git to use merge strategy for divergent branches
            git config pull.rebase false
            
            # Fetch all branches first
            echo "📥 Fetching all branches..."
            git fetch --all
            
            # Pull from the correct branch (master or the deployment branch)
            DEPLOYMENT_BRANCH="${{ github.ref_name }}"
            echo "🔍 Deployment branch: $DEPLOYMENT_BRANCH"
            
            if [ "$DEPLOYMENT_BRANCH" = "refs/heads/master" ] || [ "$DEPLOYMENT_BRANCH" = "master" ]; then
              echo "📥 Pulling from master branch..."
              git pull origin master
            else
              echo "📥 Pulling from hotfix/new_updates branch..."
              git pull origin hotfix/new_updates
            fi
            
            # Show git status after pull
            echo "🔍 Git status after pull:"
            git status
            echo "🔍 Current branch after pull: $(git branch --show-current)"
            
            # If there are conflicts or issues, try a hard reset to the remote branch
            if [ "$(git status --porcelain)" != "" ]; then
              echo "⚠️ Git repository has uncommitted changes, performing hard reset..."
              if [ "$DEPLOYMENT_BRANCH" = "refs/heads/master" ] || [ "$DEPLOYMENT_BRANCH" = "master" ]; then
                git reset --hard origin/master
              else
                git reset --hard origin/hotfix/new_updates
              fi
              echo "✅ Hard reset completed"
            fi
            
            # Show what plugins are available after git pull
            echo "📁 Available plugins after git pull:"
            ls -la local/ 2>/dev/null || echo "No local plugins found"
            
            # Deploy each plugin
            if [ -z "$PLUGINS_TO_DEPLOY" ]; then
              echo "ℹ️ No plugins need deployment based on detected changes"
              echo "🔍 This is normal when:"
              echo "   - Only non-plugin files were modified (documentation, configuration, etc.)"
              echo "   - No plugin files were changed in this push"
              echo "   - Changes are in directories that aren't valid Moodle plugins"
              echo ""
              echo "📁 Available plugins on server (for reference):"
              ls -la local/ 2>/dev/null || echo "No local plugins found"
              echo "✅ Deployment completed - no plugin changes to deploy"
            else
              for plugin_path in $PLUGINS_TO_DEPLOY; do
              echo "🎯 Deploying plugin: $plugin_path"
              
              # Check if plugin exists after git pull
              if [ ! -d "$plugin_path" ]; then
                echo "❌ Plugin directory $plugin_path not found after git pull!"
                echo "📁 Available local plugins:"
                ls -la local/ 2>/dev/null || echo "No local plugins found"
                echo "⚠️ Continuing with other plugins..."
                continue
              fi
              
              # Create backup of existing plugin (if exists)
              echo "📋 Creating backup of existing plugin..."
              cp -r $plugin_path ${plugin_path}.backup.$(date +%Y%m%d_%H%M%S)
              echo "✅ Backup created successfully for $plugin_path"
              
              # Set proper permissions for plugin
              echo "🔐 Setting proper permissions for $plugin_path..."
              chmod -R 755 $plugin_path
              chown -R www-data:www-data $plugin_path
              echo "✅ Permissions set for $plugin_path"
              
              # Verify plugin installation
              echo "✅ Verifying plugin installation for $plugin_path..."
              if [ -f "$plugin_path/version.php" ]; then
                echo "✅ Plugin files are in place for $plugin_path"
                echo "📊 Plugin version info for $plugin_path:"
                grep -E "\$plugin->version|\$plugin->component" $plugin_path/version.php 2>/dev/null || echo "Could not read plugin version"
              else
                echo "❌ Plugin files not found at $plugin_path"
                echo "📁 Available files in plugin directory:"
                ls -la $plugin_path 2>/dev/null || echo "Plugin directory not accessible"
                echo "⚠️ Continuing with other plugins..."
                continue
              fi
              
              echo "✅ Successfully deployed plugin: $plugin_path"
            done
            fi
            
            # Clear Moodle cache after all plugins are deployed
            echo "🧹 Clearing Moodle cache..."
            if [ -f "admin/cli/purge_caches.php" ]; then
              if php admin/cli/purge_caches.php; then
                echo "✅ Cache cleared successfully"
              else
                echo "⚠️ Cache clearing failed, but continuing..."
              fi
            else
              echo "⚠️ Cache clearing script not found, but continuing..."
            fi
            
            # Check current plugin versions before upgrade
            echo "📊 Pre-upgrade version check..."
            echo "🧩 Current plugin versions:"
            find local/ -name "version.php" -exec echo "File: {}" \; -exec grep -E "\$plugin->version|\$plugin->component" {} \; 2>/dev/null || echo "No plugin version files found"
            
            # Run Moodle upgrade if needed
            echo "⬆️ Running Moodle upgrade..."
            if [ -f "admin/cli/upgrade.php" ]; then
              # Check and fix PHP max_input_vars setting if needed
              echo "🔍 Checking PHP settings..."
              CURRENT_MAX_INPUT_VARS=$(php -r "echo ini_get('max_input_vars');" 2>/dev/null || echo "0")
              echo "📊 Current max_input_vars: $CURRENT_MAX_INPUT_VARS"
              
              if [ "$CURRENT_MAX_INPUT_VARS" -lt 5000 ]; then
                echo "⚠️ max_input_vars is too low ($CURRENT_MAX_INPUT_VARS), attempting to set it for this session..."
                export PHP_INI_SCAN_DIR="/tmp"
                echo "max_input_vars = 10000" > /tmp/99-moodle.ini
              fi
              
              if php admin/cli/upgrade.php --non-interactive; then
                echo "✅ Moodle upgrade completed successfully"
                
                # Verify upgrade success
                echo "🔍 Post-upgrade verification..."
                if php admin/cli/cfg.php --component=core --name=version 2>/dev/null; then
                  echo "✅ Moodle core version updated successfully"
                else
                  echo "⚠️ Could not verify core version update"
                fi
                
              else
                echo "❌ Moodle upgrade failed!"
                echo "📋 Checking for upgrade issues..."
                
                # Check if it's a version conflict
                if [ -f "version.php" ]; then
                  echo "📊 Moodle version information:"
                  grep -E "\$release|\$version" version.php || echo "Could not read version info"
                fi
                
                # Check plugin versions
                echo "🧩 Plugin version information:"
                find local/ -name "version.php" -exec echo "File: {}" \; -exec grep -E "\$plugin->version|\$plugin->component" {} \; 2>/dev/null || echo "No plugin version files found"
                
                # Check for common upgrade issues
                echo "🔍 Common upgrade issue checks:"
                echo "- Database connection:"
                php -r "echo 'PHP version: ' . PHP_VERSION . PHP_EOL;" 2>/dev/null || echo "  PHP check failed"
                
                echo "⚠️ Moodle upgrade failed, but continuing with deployment..."
                echo "📋 This might be due to PHP settings or database issues"
                echo "🔧 You may need to manually run the upgrade later"
              fi
            else
              echo "⚠️ Upgrade script not found, skipping upgrade..."
            fi
            
            echo "🎉 Multi-plugin deployment completed successfully!"

      - name: Verify Plugin Updates
        if: steps.plugin-detection.outputs.plugins_to_deploy != ''
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "🔍 Verifying multi-plugin deployment..."
            
            cd ${{ secrets.SERVER_BASE_PATH }}/moodle
            
            # Get the list of plugins that were deployed
            PLUGINS_TO_VERIFY="${{ steps.plugin-detection.outputs.plugins_to_deploy }}"
            
            echo "📋 Verifying plugins: $PLUGINS_TO_VERIFY"
            
            # Verify each plugin
            if [ -z "$PLUGINS_TO_VERIFY" ]; then
              echo "⚠️ No plugins to verify"
              echo "📁 Checking what plugins exist on server:"
              ls -la local/ 2>/dev/null || echo "No local plugins found on server"
            else
              for plugin_path in $PLUGINS_TO_VERIFY; do
              echo "🔍 Verifying plugin: $plugin_path"
              
              # Check plugin directory
              if [ -d "$plugin_path" ]; then
                echo "✅ Plugin directory exists: $plugin_path"
              else
                echo "❌ Plugin directory not found: $plugin_path"
                exit 1
              fi
              
              # Check plugin files
              if [ -f "$plugin_path/version.php" ]; then
                echo "✅ Plugin version file exists: $plugin_path"
              else
                echo "❌ Plugin version file not found: $plugin_path"
                exit 1
              fi
              
              # Check permissions
              if [ -r "$plugin_path/version.php" ]; then
                echo "✅ Plugin files are readable: $plugin_path"
              else
                echo "❌ Plugin files are not readable: $plugin_path"
                exit 1
              fi
            done
            fi
            
            echo "🎉 Multi-plugin verification completed successfully!"

      - name: Notify Deployment Success
        if: success()
        run: |
          DEPLOYED_PLUGINS="${{ steps.plugin-detection.outputs.plugins_to_deploy }}"
          if [ -n "$DEPLOYED_PLUGINS" ]; then
            echo "✅ Plugin deployment completed successfully!"
            echo "🎯 Plugins deployed: $DEPLOYED_PLUGINS"
          else
            echo "✅ Deployment completed successfully!"
            echo "ℹ️ No plugins needed deployment (no plugin changes detected)"
          fi
          echo "🌐 Server: ${{ secrets.SERVER_HOST }}"
          echo "🔗 Moodle URL: ${{ secrets.MOODLE_URL }}"
          echo "📅 Deployment completed at $(date)"

      - name: Notify Deployment Failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "🔍 Check the logs for more details."
          echo "📅 Failure occurred at $(date)"
          echo "🔄 You may need to manually deploy or check server configuration." 