name: Deploy Moodle (First Time) / Plugin Updates

on:
  workflow_run:
    workflows: ["Verify Badge Plugin CI"]
    types: [completed]
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    # Add debugging information
    env:
      WORKFLOW_NAME: ${{ github.event.workflow_run.name }}
      WORKFLOW_CONCLUSION: ${{ github.event.workflow_run.conclusion }}
      TRIGGERING_BRANCH: ${{ github.event.workflow_run.head_branch }}
    
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Debug Workflow Trigger
        run: |
          echo "üîç Debugging workflow trigger..."
          echo "Workflow Name: ${{ github.event.workflow_run.name }}"
          echo "Workflow Conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Triggering Branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Repository: ${{ github.repository }}"
          echo "Event Name: ${{ github.event_name }}"
          echo "Event Action: ${{ github.event.action }}"
          
          if [ "${{ github.event.workflow_run.conclusion }}" != "success" ]; then
            echo "‚ùå CI workflow did not complete successfully - exiting"
            exit 1
          fi
          
          echo "‚úÖ CI workflow completed successfully - proceeding with deployment"

      - name: Determine deployment type
        id: deployment-type
        run: |
          # Check if this is first-time deployment or plugin update
          if [ "${{ secrets.FIRST_TIME_DEPLOYMENT }}" = "true" ]; then
            echo "deployment_type=first_time" >> $GITHUB_OUTPUT
            echo "üöÄ First-time Moodle deployment detected"
          else
            echo "deployment_type=plugin_update" >> $GITHUB_OUTPUT
            echo "üîß Plugin update deployment detected"
          fi

      - name: First-time Moodle Deployment
        if: steps.deployment-type.outputs.deployment_type == 'first_time'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "üöÄ Starting FIRST-TIME Moodle deployment..."
            
            # Navigate to server directory
            cd ${{ secrets.SERVER_BASE_PATH }}
            
            # Create backup of existing Moodle (if exists)
            if [ -d "moodle" ]; then
              echo "üìã Creating backup of existing Moodle installation..."
              cp -r moodle moodle.backup.$(date +%Y%m%d_%H%M%S)
              echo "‚úÖ Backup created successfully"
            fi
            
            # Clone the complete Moodle repository
            echo "üì• Cloning complete Moodle codebase..."
            git clone https://github.com/${{ github.repository }}.git moodle
            cd moodle
            
            # Set proper permissions for entire Moodle installation
            echo "üîê Setting proper permissions..."
            find . -type f -exec chmod 644 {} \;
            find . -type d -exec chmod 755 {} \;
            chmod -R 755 admin/ config/ local/ blocks/ mod/ theme/
            chown -R www-data:www-data .
            
            # Create moodledata directory if it doesn't exist
            if [ ! -d "../moodledata" ]; then
              echo "üìÅ Creating moodledata directory..."
              mkdir ../moodledata
              chmod 777 ../moodledata
              chown www-data:www-data ../moodledata
            fi
            
            # Set up Moodle configuration
            echo "‚öôÔ∏è Setting up Moodle configuration..."
            cp config-dist.php config.php
            
            # Clear any existing cache
            echo "üßπ Clearing cache..."
            php admin/cli/purge_caches.php
            
            echo "üéâ First-time Moodle deployment completed!"
            echo "üìù Next steps:"
            echo "   1. Configure config.php with database settings"
            echo "   2. Run Moodle installation wizard"
            echo "   3. Set FIRST_TIME_DEPLOYMENT=false for future updates"

      - name: Plugin Update Deployment
        if: steps.deployment-type.outputs.deployment_type == 'plugin_update'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "üîß Starting PLUGIN UPDATE deployment..."
            
            # Navigate to Moodle directory
            cd ${{ secrets.MOODLE_PATH }}
            
            # Create backup of existing plugin (if exists)
            if [ -d "local/test_plugin" ]; then
              echo "üìã Creating backup of existing plugin..."
              cp -r local/test_plugin local/test_plugin.backup.$(date +%Y%m%d_%H%M%S)
              echo "‚úÖ Backup created successfully"
            fi
            
            # Pull latest changes from git
            echo "üì• Pulling latest changes from git..."
            git pull origin main
            
            # Set proper permissions for plugin only
            echo "üîê Setting proper permissions..."
            chmod -R 755 local/test_plugin
            chown -R www-data:www-data local/test_plugin
            
            # Clear Moodle cache
            echo "üßπ Clearing Moodle cache..."
            php admin/cli/purge_caches.php
            
            # Run Moodle upgrade if needed
            echo "‚¨ÜÔ∏è Running Moodle upgrade..."
            php admin/cli/upgrade.php --non-interactive
            
            # Verify plugin installation
            echo "‚úÖ Verifying plugin installation..."
            if [ -f "local/test_plugin/version.php" ]; then
              echo "‚úÖ Plugin files are in place"
            else
              echo "‚ùå Plugin files not found"
              exit 1
            fi
            
            echo "üéâ Plugin update deployed successfully!"

      - name: Verify First-time Deployment
        if: steps.deployment-type.outputs.deployment_type == 'first_time'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "üîç Verifying first-time Moodle deployment..."
            
            cd ${{ secrets.SERVER_BASE_PATH }}/moodle
            
            # Check Moodle installation
            if [ -f "version.php" ]; then
              echo "‚úÖ Moodle installation exists"
            else
              echo "‚ùå Moodle installation not found"
              exit 1
            fi
            
            # Check plugin directory
            if [ -d "local/test_plugin" ]; then
              echo "‚úÖ Plugin directory exists"
            else
              echo "‚ùå Plugin directory not found"
              exit 1
            fi
            
            # Check plugin files
            if [ -f "local/test_plugin/version.php" ]; then
              echo "‚úÖ Plugin version file exists"
            else
              echo "‚ùå Plugin version file not found"
              exit 1
            fi
            
            # Check moodledata directory
            if [ -d "../moodledata" ]; then
              echo "‚úÖ moodledata directory exists"
            else
              echo "‚ùå moodledata directory not found"
              exit 1
            fi
            
            echo "üéâ First-time deployment verification completed successfully!"

      - name: Verify Plugin Update
        if: steps.deployment-type.outputs.deployment_type == 'plugin_update'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "üîç Verifying plugin update deployment..."
            
            cd ${{ secrets.MOODLE_PATH }}
            
            # Check plugin directory
            if [ -d "local/test_plugin" ]; then
              echo "‚úÖ Plugin directory exists"
            else
              echo "‚ùå Plugin directory not found"
              exit 1
            fi
            
            # Check plugin files
            if [ -f "local/test_plugin/version.php" ]; then
              echo "‚úÖ Plugin version file exists"
            else
              echo "‚ùå Plugin version file not found"
              exit 1
            fi
            
            # Check permissions
            if [ -r "local/test_plugin/version.php" ]; then
              echo "‚úÖ Plugin files are readable"
            else
              echo "‚ùå Plugin files are not readable"
              exit 1
            fi
            
            echo "üéâ Plugin update verification completed successfully!"

      - name: Notify First-time Deployment Success
        if: success() && steps.deployment-type.outputs.deployment_type == 'first_time'
        run: |
          echo "‚úÖ FIRST-TIME Moodle deployment completed successfully!"
          echo "üåê Server: ${{ secrets.SERVER_HOST }}"
          echo "üìÅ Moodle Path: ${{ secrets.SERVER_BASE_PATH }}/moodle"
          echo "üìÖ Deployment completed at $(date)"
          echo "üìù Next steps:"
          echo "   1. Configure config.php with database settings"
          echo "   2. Run Moodle installation wizard"
          echo "   3. Set FIRST_TIME_DEPLOYMENT=false for future updates"

      - name: Notify Plugin Update Success
        if: success() && steps.deployment-type.outputs.deployment_type == 'plugin_update'
        run: |
          echo "‚úÖ Plugin update deployed successfully!"
          echo "üåê Server: ${{ secrets.SERVER_HOST }}"
          echo "üîó Moodle URL: ${{ secrets.MOODLE_URL }}"
          echo "üìÖ Deployment completed at $(date)"
          echo "üéØ Plugin: local/test_plugin"

      - name: Notify Deployment Failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "üîç Check the logs for more details."
          echo "üìÖ Failure occurred at $(date)"
          echo "üîÑ You may need to manually deploy or check server configuration." 