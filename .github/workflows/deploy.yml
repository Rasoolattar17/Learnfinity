name: Deploy Plugin Updates

on:
  # Deploy after CI tests pass
  workflow_run:
    workflows: ["Learnfinity Plugin CI"]
    types:
      - completed
    branches: [master]
  
  # Allow manual deployment
  workflow_dispatch:
  
  # Emergency direct deployment (bypass CI)
  push:
    branches: [master]
    paths: ['.github/workflows/deploy.yml']

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Only run if CI tests passed (or manual/emergency trigger)
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && contains(github.event.head_commit.message, '.github/workflows/deploy.yml')) ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    
    # Add debugging information
    env:
      DEPLOYMENT_BRANCH: ${{ github.ref_name }}
      DEPLOYMENT_COMMIT: ${{ github.sha }}
    
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Debug Workflow Trigger
        run: |
          echo "üöÄ Deployment workflow triggered!"
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "üß™ Triggered by CI workflow: ${{ github.event.workflow_run.name }}"
            echo "üéØ CI workflow status: ${{ github.event.workflow_run.conclusion }}"
            echo "‚úÖ CI tests passed - proceeding with deployment!"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "üîß Manual deployment triggered"
          else
            echo "üö® Emergency deployment triggered"
          fi
          
          echo "‚úÖ Proceeding with deployment..."

      - name: Check Required Secrets
        id: check-secrets
        run: |
          echo "üîç Checking required secrets..."
          
          if [ -z "${{ secrets.MOODLE_PATH }}" ]; then
            echo "‚ùå MOODLE_PATH secret is missing!"
            echo "Please configure MOODLE_PATH in GitHub Secrets"
            exit 1
          fi
          
          if [ -z "${{ secrets.SERVER_HOST }}" ]; then
            echo "‚ùå SERVER_HOST secret is missing!"
            echo "Please configure SERVER_HOST in GitHub Secrets"
            exit 1
          fi
          
          if [ -z "${{ secrets.SERVER_USERNAME }}" ]; then
            echo "‚ùå SERVER_USERNAME secret is missing!"
            echo "Please configure SERVER_USERNAME in GitHub Secrets"
            exit 1
          fi
          
          if [ -z "${{ secrets.SERVER_SSH_KEY }}" ]; then
            echo "‚ùå SERVER_SSH_KEY secret is missing!"
            echo "Please configure SERVER_SSH_KEY in GitHub Secrets"
            exit 1
          fi
          
          echo "‚úÖ All plugin update secrets are configured"

      - name: Auto-detect Changed Plugins
        id: plugin-detection
        run: |
          echo "üîç Detecting changed plugins for deployment..."
          
          # Get list of changed files
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            # For workflow_run (triggered by CI), check the triggering commit
            echo "üìã Checking changes in CI-triggered deployment..."
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # For manual triggers, check recent commits
            echo "üìã Checking changes in manual deployment..."
            CHANGED_FILES=$(git diff --name-only HEAD~3 HEAD)
          else
            # For emergency pushes, check the current commit
            echo "üìã Checking changes in emergency deployment..."
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          echo "üìÑ Changed files:"
          echo "$CHANGED_FILES"
          
          # Get list of plugins that were changed
          PLUGINS_TO_DEPLOY=""
          
          # Check if any local plugins were changed
          if [ -d "local" ]; then
            for dir in local/*/; do
              if [ -f "${dir}version.php" ] && [ -f "${dir}lang/en/"*".php" 2>/dev/null ]; then
                PLUGIN_DIR="${dir%/}"
                PLUGIN_NAME=$(basename "$PLUGIN_DIR")
                
                # Check if any files in this plugin were changed
                if echo "$CHANGED_FILES" | grep -q "^local/$PLUGIN_NAME/"; then
                  echo "‚úÖ Found changed local plugin: $PLUGIN_DIR"
                  PLUGINS_TO_DEPLOY="$PLUGINS_TO_DEPLOY $PLUGIN_DIR"
                else
                  echo "‚è≠Ô∏è Skipping unchanged local plugin: $PLUGIN_DIR"
                fi
              fi
            done
          fi
          
          # Check if any mod plugins were changed
          if [ -d "mod" ]; then
            for dir in mod/*/; do
              dirname=$(basename "$dir")
              # Skip built-in Moodle modules, focus on custom ones
              if [[ ! "$dirname" =~ ^(assign|book|chat|choice|data|feedback|forum|glossary|h5pactivity|imscp|label|lesson|lti|page|quiz|resource|scorm|survey|url|wiki|workshop)$ ]] && [ -f "${dir}version.php" ]; then
                PLUGIN_DIR="${dir%/}"
                PLUGIN_NAME=$(basename "$PLUGIN_DIR")
                
                # Check if any files in this plugin were changed
                if echo "$CHANGED_FILES" | grep -q "^mod/$PLUGIN_NAME/"; then
                  echo "‚úÖ Found changed mod plugin: $PLUGIN_DIR"
                  PLUGINS_TO_DEPLOY="$PLUGINS_TO_DEPLOY $PLUGIN_DIR"
                else
                  echo "‚è≠Ô∏è Skipping unchanged mod plugin: $PLUGIN_DIR"
                fi
              fi
            done
          fi
          
          # Check if any block plugins were changed
          if [ -d "blocks" ]; then
            for dir in blocks/*/; do
              dirname=$(basename "$dir")
              # Skip built-in Moodle blocks, focus on custom ones
              if [[ ! "$dirname" =~ ^(accessreview|activity_modules|activity_results|admin_bookmarks|badges|blog_menu|blog_recent|blog_tags|calendar_month|calendar_upcoming|comments|completionstatus|course_list|course_summary|feedback|globalsearch|glossary_random|html|login|lp|mentees|mnet_hosts|myoverview|myprofile|navigation|news_items|online_users|private_files|recent_activity|recentlyaccessedcourses|recentlyaccesseditems|rss_client|search_forums|section_links|selfcompletion|settings|site_main_menu|social_activities|starredcourses|tag_flickr|tag_youtube|tags|timeline)$ ]] && [ -f "${dir}version.php" ]; then
                PLUGIN_DIR="${dir%/}"
                PLUGIN_NAME=$(basename "$PLUGIN_DIR")
                
                # Check if any files in this plugin were changed
                if echo "$CHANGED_FILES" | grep -q "^blocks/$PLUGIN_NAME/"; then
                  echo "‚úÖ Found changed block plugin: $PLUGIN_DIR"
                  PLUGINS_TO_DEPLOY="$PLUGINS_TO_DEPLOY $PLUGIN_DIR"
                else
                  echo "‚è≠Ô∏è Skipping unchanged block plugin: $PLUGIN_DIR"
                fi
              fi
            done
          fi
          
          # Fallback if no plugins detected or if it's a manual trigger
          if [ -z "$PLUGINS_TO_DEPLOY" ]; then
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "‚ö†Ô∏è No changed plugins detected in manual trigger, deploying all plugins..."
              # For manual triggers, deploy all plugins
              PLUGINS_TO_DEPLOY=""
              if [ -d "local" ]; then
                for dir in local/*/; do
                  if [ -f "${dir}version.php" ] && [ -f "${dir}lang/en/"*".php" 2>/dev/null ]; then
                    PLUGIN_DIR="${dir%/}"
                    echo "‚úÖ Found local plugin: $PLUGIN_DIR"
                    PLUGINS_TO_DEPLOY="$PLUGINS_TO_DEPLOY $PLUGIN_DIR"
                  fi
                done
              fi
              if [ -d "mod" ]; then
                for dir in mod/*/; do
                  dirname=$(basename "$dir")
                  if [[ ! "$dirname" =~ ^(assign|book|chat|choice|data|feedback|forum|glossary|h5pactivity|imscp|label|lesson|lti|page|quiz|resource|scorm|survey|url|wiki|workshop)$ ]] && [ -f "${dir}version.php" ]; then
                    PLUGIN_DIR="${dir%/}"
                    echo "‚úÖ Found mod plugin: $PLUGIN_DIR"
                    PLUGINS_TO_DEPLOY="$PLUGINS_TO_DEPLOY $PLUGIN_DIR"
                  fi
                done
              fi
              if [ -d "blocks" ]; then
                for dir in blocks/*/; do
                  dirname=$(basename "$dir")
                  if [[ ! "$dirname" =~ ^(accessreview|activity_modules|activity_results|admin_bookmarks|badges|blog_menu|blog_recent|blog_tags|calendar_month|calendar_upcoming|comments|completionstatus|course_list|course_summary|feedback|globalsearch|glossary_random|html|login|lp|mentees|mnet_hosts|myoverview|myprofile|navigation|news_items|online_users|private_files|recent_activity|recentlyaccessedcourses|recentlyaccesseditems|rss_client|search_forums|section_links|selfcompletion|settings|site_main_menu|social_activities|starredcourses|tag_flickr|tag_youtube|tags|timeline)$ ]] && [ -f "${dir}version.php" ]; then
                    PLUGIN_DIR="${dir%/}"
                    echo "‚úÖ Found block plugin: $PLUGIN_DIR"
                    PLUGINS_TO_DEPLOY="$PLUGINS_TO_DEPLOY $PLUGIN_DIR"
                  fi
                done
              fi
            else
              echo "‚ö†Ô∏è No changed plugins detected, falling back to local/test_plugin"
              PLUGINS_TO_DEPLOY="local/test_plugin"
            fi
          fi
          
          # Store plugins for deployment
          if [ -n "$PLUGINS_TO_DEPLOY" ]; then
            echo "üìã Changed plugins to deploy: $PLUGINS_TO_DEPLOY"
            echo "PLUGINS_TO_DEPLOY=$PLUGINS_TO_DEPLOY" >> $GITHUB_ENV
            echo "plugins_to_deploy=$PLUGINS_TO_DEPLOY" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è No plugins detected, falling back to local/test_plugin"
            echo "PLUGINS_TO_DEPLOY=local/test_plugin" >> $GITHUB_ENV
            echo "plugins_to_deploy=local/test_plugin" >> $GITHUB_OUTPUT
          fi

      - name: Plugin Update Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Get the list of plugins to deploy
            PLUGINS_TO_DEPLOY="${{ env.PLUGINS_TO_DEPLOY }}"
            
            echo "üîß Starting MULTI-PLUGIN UPDATE deployment..."
            echo "üìã Plugins to deploy: $PLUGINS_TO_DEPLOY"
            
            # Navigate to Moodle directory
            cd ${{ secrets.MOODLE_PATH }}
            echo "üìç Current directory: $(pwd)"
            
            # Check if this is a git repository
            if [ ! -d ".git" ]; then
              echo "‚ùå Not a git repository. Cannot pull latest changes."
              echo "üìÅ Current directory contents:"
              ls -la
              exit 1
            fi
            
            # Pull latest changes from git
            echo "üì• Pulling latest changes from git..."
            git pull origin master
            
            # Deploy each plugin
            for plugin_path in $PLUGINS_TO_DEPLOY; do
              echo "üéØ Deploying plugin: $plugin_path"
              
              # Create backup of existing plugin (if exists)
              if [ -d "$plugin_path" ]; then
                echo "üìã Creating backup of existing plugin..."
                cp -r $plugin_path ${plugin_path}.backup.$(date +%Y%m%d_%H%M%S)
                echo "‚úÖ Backup created successfully for $plugin_path"
              fi
              
              # Set proper permissions for plugin
              echo "üîê Setting proper permissions for $plugin_path..."
              if [ -d "$plugin_path" ]; then
                chmod -R 755 $plugin_path
                chown -R www-data:www-data $plugin_path
                echo "‚úÖ Permissions set for $plugin_path"
              else
                echo "‚ùå Plugin directory $plugin_path not found!"
                echo "üìÅ Available local plugins:"
                ls -la local/ 2>/dev/null || echo "No local plugins found"
                echo "‚ö†Ô∏è Continuing with other plugins..."
                continue
              fi
              
              # Verify plugin installation
              echo "‚úÖ Verifying plugin installation for $plugin_path..."
              if [ -f "$plugin_path/version.php" ]; then
                echo "‚úÖ Plugin files are in place for $plugin_path"
                echo "üìä Plugin version info for $plugin_path:"
                grep -E "\$plugin->version|\$plugin->component" $plugin_path/version.php 2>/dev/null || echo "Could not read plugin version"
              else
                echo "‚ùå Plugin files not found at $plugin_path"
                echo "üìÅ Available files in plugin directory:"
                ls -la $plugin_path 2>/dev/null || echo "Plugin directory not accessible"
                echo "‚ö†Ô∏è Continuing with other plugins..."
                continue
              fi
              
              echo "‚úÖ Successfully deployed plugin: $plugin_path"
            done
            
            # Clear Moodle cache after all plugins are deployed
            echo "üßπ Clearing Moodle cache..."
            if [ -f "admin/cli/purge_caches.php" ]; then
              if php admin/cli/purge_caches.php; then
                echo "‚úÖ Cache cleared successfully"
              else
                echo "‚ö†Ô∏è Cache clearing failed, but continuing..."
              fi
            else
              echo "‚ö†Ô∏è Cache clearing script not found, but continuing..."
            fi
            
            # Check current plugin versions before upgrade
            echo "üìä Pre-upgrade version check..."
            echo "üß© Current plugin versions:"
            find local/ -name "version.php" -exec echo "File: {}" \; -exec grep -E "\$plugin->version|\$plugin->component" {} \; 2>/dev/null || echo "No plugin version files found"
            
            # Run Moodle upgrade if needed
            echo "‚¨ÜÔ∏è Running Moodle upgrade..."
            if [ -f "admin/cli/upgrade.php" ]; then
              if php admin/cli/upgrade.php --non-interactive; then
                echo "‚úÖ Moodle upgrade completed successfully"
                
                # Verify upgrade success
                echo "üîç Post-upgrade verification..."
                if php admin/cli/cfg.php --component=core --name=version 2>/dev/null; then
                  echo "‚úÖ Moodle core version updated successfully"
                else
                  echo "‚ö†Ô∏è Could not verify core version update"
                fi
                
              else
                echo "‚ùå Moodle upgrade failed!"
                echo "üìã Checking for upgrade issues..."
                
                # Check if it's a version conflict
                if [ -f "version.php" ]; then
                  echo "üìä Moodle version information:"
                  grep -E "\$release|\$version" version.php || echo "Could not read version info"
                fi
                
                # Check plugin versions
                echo "üß© Plugin version information:"
                find local/ -name "version.php" -exec echo "File: {}" \; -exec grep -E "\$plugin->version|\$plugin->component" {} \; 2>/dev/null || echo "No plugin version files found"
                
                # Check for common upgrade issues
                echo "üîç Common upgrade issue checks:"
                echo "- Database connection:"
                php -r "echo 'PHP version: ' . PHP_VERSION . PHP_EOL;" 2>/dev/null || echo "  PHP check failed"
                
                echo "‚ùå Deployment failed due to upgrade issues"
                exit 1
              fi
            else
              echo "‚ö†Ô∏è Upgrade script not found, skipping upgrade..."
            fi
            
            echo "üéâ Multi-plugin deployment completed successfully!"

      - name: Verify Plugin Updates
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "üîç Verifying multi-plugin deployment..."
            
            cd ${{ secrets.MOODLE_PATH }}
            
            # Get the list of plugins that were deployed
            PLUGINS_TO_VERIFY="${{ steps.plugin-detection.outputs.plugins_to_deploy }}"
            
            echo "üìã Verifying plugins: $PLUGINS_TO_VERIFY"
            
            # Verify each plugin
            for plugin_path in $PLUGINS_TO_VERIFY; do
              echo "üîç Verifying plugin: $plugin_path"
              
              # Check plugin directory
              if [ -d "$plugin_path" ]; then
                echo "‚úÖ Plugin directory exists: $plugin_path"
              else
                echo "‚ùå Plugin directory not found: $plugin_path"
                exit 1
              fi
              
              # Check plugin files
              if [ -f "$plugin_path/version.php" ]; then
                echo "‚úÖ Plugin version file exists: $plugin_path"
              else
                echo "‚ùå Plugin version file not found: $plugin_path"
                exit 1
              fi
              
              # Check permissions
              if [ -r "$plugin_path/version.php" ]; then
                echo "‚úÖ Plugin files are readable: $plugin_path"
              else
                echo "‚ùå Plugin files are not readable: $plugin_path"
                exit 1
              fi
            done
            
            echo "üéâ Multi-plugin verification completed successfully!"

      - name: Notify Plugin Update Success
        if: success()
        run: |
          echo "‚úÖ Multi-plugin update deployed successfully!"
          echo "üåê Server: ${{ secrets.SERVER_HOST }}"
          echo "üîó Moodle URL: ${{ secrets.MOODLE_URL }}"
          echo "üìÖ Deployment completed at $(date)"
          echo "üéØ Plugins deployed: ${{ steps.plugin-detection.outputs.plugins_to_deploy }}"

      - name: Notify Deployment Failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "üîç Check the logs for more details."
          echo "üìÖ Failure occurred at $(date)"
          echo "üîÑ You may need to manually deploy or check server configuration." 